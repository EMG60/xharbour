xBuild is a portable comprehensive Project Builder, specific to xHarbour
[but can also be used with plain C projects] able to build:

  EXE Files.
  LIB Files
  DLL Files (prg dlls, are built but not yet functional - more info soon.)

From any combination of:

  PRG files
  C Files
  RC Files
  Y or SLY Files (Bison)
  OBJ Files
  LIB Files
  RES Files.
  XBP File (project files generated by xBuild)

Special Features:
-----------------
  - Complete Dependency Engine, (generic as well as xHarbour specific).
  - Automatic support for #include files [recursive] dependencies.
  - Auto detection of Console/GUI Mode.
  - Auto detection of FWH WHAT32, ADS, and APOLLO
  - Auto dependency on xHarbour itself.
  - Support for Wildcards in file names.
  - Auto generation of Project Files <target>[.exe|.lib|.dll].xbp
  - May combine command line arguments as well as Project Files and Wizard settings.
  - Supports recursive projects.
  - Flexible command line syntax.
  - Auto detection of xHarbour on any available drive on your system.
  - Auto detection of C compilers on any available drive on your system.
  - Full support for long file names, including Spaces.

Syntax:
--------

xBuild [<target.exe|lib|dll>|<MainsSurce>] [<MoreSourceMask>] [switches]
or
xBuild <ProjectFile.exe|lib|dll.xbp> [switches]

or combination of Command Line sources, Switches, and Project Files.



Switches: -All (Force clean build.)
                 -C<Bcc|Gcc|Lcc|Mingw|Vc>=<RootFolder>[,C_Flags]
                 -D<Define>[=<Value>][;<MoreDefines>]
                 -Expand (Expand file groups when generating project file.)
                 -G<GUI_Root>[,GUI_PRG_Flags [,<Optional_GUI_LibFolders>]]
                 -I<IncludeFolder>[;<MoreFolders>]
                 -L<LibFolder[;<MoreFolders>]
                 -NoErr (Don't raise an error on failure.)
                 -NoLog (Don't display production log on failure.)
                 -O<OutFolder>[,<PRG_OutFolder>[,<C_OutFolder>[,<RC_OutFolder>
]]]
               -Quiet (Don't display progress.)
               -X<xHarbourRoot>[,PRG_Flags [,<OptionalLibFolder>]]

Samples:
---------

in xHarbour root directory:

   xbuild.exe xbp_bin\xhb.exe source\compiler\harbour.sly source\common\*.c
                     source\compiler\*.c source\pp\*.c -oxbp_obj -ixbp_obj

This will:

   1. Create folders xbp_bin and xbp_obj
   2. Compile all needed sources into xbp_obj folder.
   3. Will link xhb.exe into xbp_bin folder.

So this one simple command line just built the complete xHarbour compiler.


What if I need to specify my C compiler or xHarbour location?
----------------------------------------------------------------------------

Use the -C to set your C compiler as follows:

   -CBCC=<root>[,<flags>]
   -CGCC=<root>[,<flags>]
   -CLCC=<root>[,<flags>]
   -CMINGW=<root>[,<flags>]
   -CVC=<root>[,<flags>]
   -CXCC=<root>[,<flags>]


Sample:

   -CBCC=F:\BCC55,-DHB_FM_STATISTICS_OFF

Use the -X to set your xHarbour compiler as follows:

   -X<root>[,<flags>[,<libfolder>]]

Sample:

  -XF:\xharbour,-P -N,f:\xharbour\lib\b32

More Samples:
------------------

   xbuild mymain myothrprg mycfile.c

// Note Target not specified, and .prg extension not specified.

This will create mymain.exe from mymain.prg + myotherprg.prg and mycfile.c

As always it will also create mymain.exe.xbp in the cirrent folder.

Once you did the above you could use the generated Project File in future
builds as follows:

   xbuild mymain.exe.xbp

That's all, but I could also now specify additional arguments as well as
switches if desired. This will create a revised version of mymain.exe.xbp to
reflect the latest settings used.

Advance use:
----------------

Assume you have an application which must link against few Libraries which
you must build as well.

Well now you may easily create 1 project for each of the Libs as follows:

   xbuild firstlibfolder\firstlib.lib firstlibfolder\*.prg
firstlibfolder\*.c

This will build firstlibfolder\firstlib.lib as well as firstlib.lib.xbp in
the cirrent folder.

Then let's build our second lib:

   xbuild secondlibfolder\secondlib.lib secondlibfolder\*.prg

This will build secondlibfolder\secondlib.lib as well as secondlib.lib.xbp
in the cirrent folder.

Well, now we may use these generated Project Files as dependency files in
our Application build as follows:

xbuild  bin\myapp.exe prg\mymain.prg prg\*.prg c\*.c firstlib.lib.xbp
secondlib.lib.xbp

The above command line will first verify and build the needed libs, and will
also use the built libs for building the final app.

Cool and simple, don't you agree?

What if my folder has MANY source files MOST of them I want but NOT all, and
I hate typing?
----------------------------------------------------------------------------
---------------------

If you are as Lazy as I am, you would use the Wildcard feature jus to gather
all the needed info and use the  -Expand switch. This will force generation
of a Project File listing ALL Found files. Well now it's easy to DELETE the
sections for the UNWANTED Files, and you are all done. This Project File may
now be used instead of a long list of each of the needed files.
